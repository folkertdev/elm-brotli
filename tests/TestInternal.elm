module TestInternal exposing (bug1, bug2, bug3, charCodeAt, wholePipeline)

import Array
import Bytes exposing (Endianness(..))
import Bytes.Decode as Decode
import Bytes.Encode as Encode
import Expect exposing (Expectation)
import Fuzz exposing (Fuzzer, int, list, string)
import Internal
import Test exposing (..)
import Transforms


wholePipeline =
    let
        stringFromInt32 buffer =
            Decode.decode (Decode.string (Bytes.width buffer)) buffer

        toBuffer32 raw =
            raw
                |> List.map (Encode.unsignedInt32 BE)
                |> Encode.sequence
                |> Encode.encode

        pipeline32 name expected raw =
            test name <|
                \_ ->
                    let
                        data =
                            toBuffer32 raw
                    in
                    case Internal.decode data of
                        Err e ->
                            Expect.fail e

                        Ok v ->
                            Decode.decode (Decode.string (Bytes.width v)) v
                                |> Expect.equal (Just expected)

        pipeline name expected raw =
            test name <|
                \_ ->
                    let
                        data =
                            raw
                                |> List.map Encode.unsignedInt8
                                |> Encode.sequence
                                |> Encode.encode
                    in
                    case Internal.decode data of
                        Err e ->
                            Expect.fail e

                        Ok v ->
                            Decode.decode (Decode.string (Bytes.width v)) v
                                |> Expect.equal (Just expected)
    in
    describe "whole pipeline"
        [ pipeline "empty 1" "" [ 6 ]
        , pipeline "empty 2" "" [ 6 ]
        , pipeline "time" "time" [ 0x1B, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE3, 0xB4, 0x0D, 0x00, 0x00, 0x07, 0x5B, 0x26, 0x31, 0x40, 0x02, 0x00, 0xE0, 0x4E, 0x1B, 0x41, 0x02 ]
        , pipeline "aabbaaaaabab" "aabbaaaaabab" [ 0x1B, 0x0B, 0x00, 0x11, 0x01, 0x8C, 0xC1, 0xC5, 0x0D, 0x08, 0x00, 0x22, 0x65, 0xE1, 0xFC, 0xFD, 0x22, 0x2C, 0xC4, 0x00, 0x00, 0x38, 0xD8, 0x32, 0x89, 0x01, 0x12, 0x00, 0x00, 0x77, 0xDA, 0x04, 0x10, 0x42, 0x00, 0x00, 0x00 ]
        , pipeline "himselfself" "himselfself" [ 0x1B, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE3, 0xB4, 0x0D, 0x00, 0x00, 0x07, 0x5B, 0x26, 0x31, 0x40, 0x02, 0x00, 0xE0, 0x4E, 0x1B, 0xA1, 0x80, 0x20, 0x00 ]
        , pipeline "many as" (String.repeat 1022 "a" ++ "bbbbbbbbbb") [ 0x21, 0xF4, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xA7, 0x6D, 0x00, 0x00, 0x38, 0xD8, 0x32, 0x89, 0x01, 0x12, 0x00, 0x00, 0x77, 0xDA, 0x34, 0x7B, 0xDB, 0x50, 0x80, 0x02, 0x80, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4E, 0xDB, 0x00, 0x00, 0x70, 0xB0, 0x65, 0x12, 0x03, 0x24, 0x00, 0x00, 0xEE, 0xB4, 0x11, 0x24, 0x00 ]
        , pipeline "abc" "abc" [ 11, 1, 128, 97, 98, 99, 3 ]
        , test "string 32" <|
            \_ ->
                stringFromInt32 (toBuffer32 [ 0x74686973, 0x20697320, 0x61207465, 0x73740A00 ])
                    |> Expect.equal (Just "this is a test\n\u{0000}")

        -- , pipeline "test uncompressed" "this\n"  [11, 2, 128, 116, 104, 105, 115, 10, 3]
        , describe "bug 4"
            [ test "lut" <|
                \_ ->
                    let
                        input =
                            { distancePostfixBits = 3, numDirectDistanceCodes = 120, distExtraBits = Array.repeat 544 0, distOffset = Array.repeat 544 0 }

                        output =
                            { distancePostfixBits = 3
                            , numDirectDistanceCodes = 120
                            , distExtraBits = Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                            , distOffset = Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 141, 142, 143, 144, 153, 154, 155, 156, 157, 158, 159, 160, 185, 186, 187, 188, 189, 190, 191, 192, 217, 218, 219, 220, 221, 222, 223, 224, 281, 282, 283, 284, 285, 286, 287, 288, 345, 346, 347, 348, 349, 350, 351, 352, 473, 474, 475, 476, 477, 478, 479, 480, 601, 602, 603, 604, 605, 606, 607, 608, 857, 858, 859, 860, 861, 862, 863, 864, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 8281, 8282, 8283, 8284, 8285, 8286, 8287, 8288, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 24665, 24666, 24667, 24668, 24669, 24670, 24671, 24672, 32857, 32858, 32859, 32860, 32861, 32862, 32863, 32864, 49241, 49242, 49243, 49244, 49245, 49246, 49247, 49248, 65625, 65626, 65627, 65628, 65629, 65630, 65631, 65632, 98393, 98394, 98395, 98396, 98397, 98398, 98399, 98400, 131161, 131162, 131163, 131164, 131165, 131166, 131167, 131168, 196697, 196698, 196699, 196700, 196701, 196702, 196703, 196704, 262233, 262234, 262235, 262236, 262237, 262238, 262239, 262240, 393305, 393306, 393307, 393308, 393309, 393310, 393311, 393312, 524377, 524378, 524379, 524380, 524381, 524382, 524383, 524384, 786521, 786522, 786523, 786524, 786525, 786526, 786527, 786528, 1048665, 1048666, 1048667, 1048668, 1048669, 1048670, 1048671, 1048672, 1572953, 1572954, 1572955, 1572956, 1572957, 1572958, 1572959, 1572960, 2097241, 2097242, 2097243, 2097244, 2097245, 2097246, 2097247, 2097248, 3145817, 3145818, 3145819, 3145820, 3145821, 3145822, 3145823, 3145824, 4194393, 4194394, 4194395, 4194396, 4194397, 4194398, 4194399, 4194400, 6291545, 6291546, 6291547, 6291548, 6291549, 6291550, 6291551, 6291552, 8388697, 8388698, 8388699, 8388700, 8388701, 8388702, 8388703, 8388704, 12583001, 12583002, 12583003, 12583004, 12583005, 12583006, 12583007, 12583008, 16777305, 16777306, 16777307, 16777308, 16777309, 16777310, 16777311, 16777312, 25165913, 25165914, 25165915, 25165916, 25165917, 25165918, 25165919, 25165920, 33554521, 33554522, 33554523, 33554524, 33554525, 33554526, 33554527, 33554528, 50331737, 50331738, 50331739, 50331740, 50331741, 50331742, 50331743, 50331744, 67108953, 67108954, 67108955, 67108956, 67108957, 67108958, 67108959, 67108960, 100663385, 100663386, 100663387, 100663388, 100663389, 100663390, 100663391, 100663392, 134217817, 134217818, 134217819, 134217820, 134217821, 134217822, 134217823, 134217824, 201326681, 201326682, 201326683, 201326684, 201326685, 201326686, 201326687, 201326688, 268435545, 268435546, 268435547, 268435548, 268435549, 268435550, 268435551, 268435552, 402653273, 402653274, 402653275, 402653276, 402653277, 402653278, 402653279, 402653280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                            }
                    in
                    Internal.calculateDistanceLut 520 input
                        |> Expect.equal output
            , pipeline "test uncompressed" "this is a test\n" [ 27, 14, 0, 248, 37, 20, 82, 144, 66, 20, 169, 91, 100, 234, 20, 193 ]
            ]
        , pipeline32 "this is a test" "this is a test\n" [ 0x1B0E00F8, 0x25145290, 0x4214A95B, 0x64EA14C1 ]
        , pipeline32 "a bit of icelandic" "fjö\n" [ 0x0B028066, 0x6AC3B60A, 0x03000000 ]
        , pipeline32 "a bit of icelandic 2" "Þeir fóru aftur um haustið til Færeyja\n" [ 0x0B1580C3, 0x9E656972, 0x2066C3B3, 0x72752061, 0x66747572, 0x20756D20, 0x68617573, 0x7469C3B0, 0x2074696C, 0x2046C3A6, 0x7265796A, 0x610A0300 ]
        , pipeline "more icelandic" "fóru aftur um haustið til Færeyja; og er þeir sigldu af landinu, féll snær mikill á\n" [ 27, 90, 0, 248, 141, 212, 81, 141, 203, 221, 204, 182, 117, 74, 250, 235, 134, 102, 183, 244, 221, 193, 240, 117, 224, 221, 96, 193, 158, 7, 27, 99, 103, 109, 143, 208, 11, 250, 149, 36, 48, 197, 14, 171, 230, 60, 32, 186, 195, 17, 3, 183, 196, 218, 204, 98, 211, 112, 165, 222, 254, 71, 78, 124, 29, 205, 145, 111, 116, 44, 118, 171, 1, 81, 152, 204, 202, 25, 7, 52, 99, 134, 53, 83, 199, 224, 75, 51, 20 ]
        , pipeline32 "paragraph1" paragraph1Text paragraph1Bytes
        , pipeline "paragraph2" "GRINNELL FORMATION.\nBecause of \n" [ 27, 31, 0, 248, 141, 212, 70, 247, 82, 178, 148, 10, 71, 82, 93, 148, 196, 228, 36, 21, 249, 5, 153, 98, 200, 168, 180, 79, 253, 203, 195, 11 ]
        {-
        , test "sanity" <|
            \_ ->
                let
                    shortBuffer =
                        Array.fromList [ -13640, 10370, 8661, -6512, 4264, 15739, 14562, -6202, -25097, -32417, 27029, -22764, -20155, 13111, 6147, 9887, 14833, -17929, 23225, -12287 ]
                in
                Internal.topUpAccumulator { pos = 10864, bitOffset = 18, accumulator32 = 972105375, shortBuffer = shortBuffer, halfOffset = 17 }
                    |> Expect.equal { pos = 10864, bitOffset = 2, accumulator32 = -1174980111, shortBuffer = shortBuffer, halfOffset = 18 }
        -}

        -- , pipeline "generated" Generated.text Generated.bytes
        , 
            test "lookup table is correctly decoded" <| 
                \_ -> 
                Internal.lookup
                    |> Expect.equal lookup_table_expected
        ]


charCodeAt =
    let
        data =
            "abcdef"
    in
    describe "charCodeAt"
        [ test "at 0" <|
            \_ ->
                Internal.charCodeAt 0 data
                    |> Expect.equal (Just 97)
        , test "at 5" <|
            \_ ->
                Internal.charCodeAt 5 data
                    |> Expect.equal (Just 102)
        ]


bug3 =
    describe "bug3"
        [ test "inverseMoveToFrontTransform" <|
            \_ ->
                let
                    input =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    output =
                        Array.fromList
                            [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
                in
                Internal.inverseMoveToFrontTransform input 128
                    |> Expect.equal output
        , test "moveToFront" <|
            \_ ->
                let
                    input =
                        Array.fromList (List.range 0 255)

                    output =
                        input
                            |> Array.set 0 1
                            |> Array.set 1 0
                in
                Internal.moveToFront 1 input
                    |> Expect.equal output
        ]


bug2 =
    describe "bug2"
        [ test "transformDictionaryWord has a bug" <|
            \_ ->
                let
                    ringBuffer =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    result =
                        Array.fromList [ 116, 105, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                in
                Transforms.transformDictionaryWord ringBuffer 0 Internal.dictionary_data 0 4 Transforms.rfc_transforms 0
                    |> Expect.equal ( result, 4 )
        , test "calculateDistanceAlphabetSize" <|
            \_ ->
                Internal.calculateDistanceAlphabetSize 0 0 24
                    |> Expect.equal 64
                    {-
        , test "readComplexHuffmanCodeHelp" <|
            \_ ->
                let
                    state =
                        { bitOffset = 7, accumulator32 = -478150656, halfOffset = 4, shortBuffer = Array.repeat 2080 0 }

                    afterState =
                        { accumulator32 = 37821262, bitOffset = 5, halfOffset = 12, shortBuffer = Array.repeat 2080 0 }
                in
                Internal.readComplexHuffmanCodeHelp 0 (Array.repeat 18 0) 32 0 state
                    |> Tuple.second
                    |> Expect.equal ( 0, 2, Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ] )
        , test "readComplexHuffmanCodeHelp 2" <|
            \_ ->
                let
                    shortBuffer =
                        Array.append (Array.fromList [ 795, 0, 0, -7296, 3508, 0, 23303, 12582, 576, -8192, 6990, 577 ]) (Array.repeat 2068 0)

                    state =
                        { bitOffset = 7, accumulator32 = -478150656, halfOffset = 4, shortBuffer = shortBuffer }

                    afterState =
                        { bitOffset = 17, accumulator32 = 229958528, halfOffset = 5, shortBuffer = shortBuffer }
                in
                Internal.readComplexHuffmanCodeHelp 0 (Array.repeat 18 0) 32 0 state
                    |> Tuple.second
                    |> Expect.equal ( 0, 2, Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ] )
        , test "readFewBits" <|
            \_ ->
                Internal.readFewBits 2 { accumulator32 = 3508, bitOffset = 9 }
                    |> Expect.equal (Ok ( { accumulator32 = 3508, bitOffset = 11 }, 2 ))
                -}
        , test "buildHuffmanTable" <|
            \_ ->
                let
                    tableGroup =
                        Array.append (Array.fromList [ 1 ]) (Array.repeat 436 0)

                    newTableGroup =
                        Array.fromList [ 1, 393216, 393248, 393232, 393264, 393224, 393256, 393240, 393272, 393220, 393252, 393236, 393268, 393228, 393260, 393244, 393276, 393218, 393250, 393234, 393266, 393226, 393258, 393242, 393274, 393222, 393254, 393238, 393270, 393230, 393262, 393246, 393278, 393217, 393249, 393233, 393265, 393225, 393257, 393241, 393273, 393221, 393253, 393237, 393269, 393229, 393261, 393245, 393277, 393219, 393251, 393235, 393267, 393227, 393259, 393243, 393275, 393223, 393255, 393239, 393271, 393231, 393263, 393247, 393279, 393216, 393248, 393232, 393264, 393224, 393256, 393240, 393272, 393220, 393252, 393236, 393268, 393228, 393260, 393244, 393276, 393218, 393250, 393234, 393266, 393226, 393258, 393242, 393274, 393222, 393254, 393238, 393270, 393230, 393262, 393246, 393278, 393217, 393249, 393233, 393265, 393225, 393257, 393241, 393273, 393221, 393253, 393237, 393269, 393229, 393261, 393245, 393277, 393219, 393251, 393235, 393267, 393227, 393259, 393243, 393275, 393223, 393255, 393239, 393271, 393231, 393263, 393247, 393279, 393216, 393248, 393232, 393264, 393224, 393256, 393240, 393272, 393220, 393252, 393236, 393268, 393228, 393260, 393244, 393276, 393218, 393250, 393234, 393266, 393226, 393258, 393242, 393274, 393222, 393254, 393238, 393270, 393230, 393262, 393246, 393278, 393217, 393249, 393233, 393265, 393225, 393257, 393241, 393273, 393221, 393253, 393237, 393269, 393229, 393261, 393245, 393277, 393219, 393251, 393235, 393267, 393227, 393259, 393243, 393275, 393223, 393255, 393239, 393271, 393231, 393263, 393247, 393279, 393216, 393248, 393232, 393264, 393224, 393256, 393240, 393272, 393220, 393252, 393236, 393268, 393228, 393260, 393244, 393276, 393218, 393250, 393234, 393266, 393226, 393258, 393242, 393274, 393222, 393254, 393238, 393270, 393230, 393262, 393246, 393278, 393217, 393249, 393233, 393265, 393225, 393257, 393241, 393273, 393221, 393253, 393237, 393269, 393229, 393261, 393245, 393277, 393219, 393251, 393235, 393267, 393227, 393259, 393243, 393275, 393223, 393255, 393239, 393271, 393231, 393263, 393247, 393279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                in
                Internal.buildHuffmanTable tableGroup 0 8 (Array.repeat 64 6)
                    |> Expect.equal { tableGroup = newTableGroup, total_size = 256 }
        , test "buildHuffmanTable 2 " <|
            \_ ->
                let
                    codeLengths =
                        Array.append (Array.repeat 320 9) (Array.repeat 384 10)

                    tableGroup =
                        Array.append (Array.fromList [ 1 ]) (Array.repeat 436 0)

                    newTableGroup =
                        Array.fromList [ 1, 590080, 590335, 590206, 656061, 590140, 655931, 590266, 656185, 590104, 590359, 590230, 656117, 590164, 655987, 590290, 656241, 590080, 590335, 590206, 656077, 590140, 655947, 590266, 656201, 590104, 590359, 590230, 656133, 590164, 656003, 590290, 656257, 590056, 590311, 590182, 656045, 590116, 655915, 590242, 656169, 590080, 590335, 590206, 656101, 590140, 655971, 590266, 656225, 590056, 590311, 590182, 656061, 590116, 655931, 590242, 656185, 590080, 590335, 590206, 656117, 590140, 655987, 590266, 656241, 590020, 590275, 590146, 656005, 590080, 655875, 590206, 656129, 590044, 590299, 590170, 656061, 590104, 655931, 590230, 656185, 590020, 590275, 590146, 656021, 590080, 655891, 590206, 656145, 590044, 590299, 590170, 656077, 590104, 655947, 590230, 656201, 589996, 590251, 590122, 655989, 590056, 655859, 590182, 656113, 590020, 590275, 590146, 656045, 590080, 655915, 590206, 656169, 589996, 590251, 590122, 656005, 590056, 655875, 590182, 656129, 590020, 590275, 590146, 656061, 590080, 655931, 590206, 656185, 589954, 590209, 590080, 655937, 590014, 655807, 590140, 656061, 589978, 590233, 590104, 655993, 590038, 655863, 590164, 656117, 589954, 590209, 590080, 655953, 590014, 655823, 590140, 656077, 589978, 590233, 590104, 656009, 590038, 655879, 590164, 656133, 589930, 590185, 590056, 655921, 589990, 655791, 590116, 656045, 589954, 590209, 590080, 655977, 590014, 655847, 590140, 656101, 589930, 590185, 590056, 655937, 589990, 655807, 590116, 656061, 589954, 590209, 590080, 655993, 590014, 655863, 590140, 656117, 589894, 590149, 590020, 655881, 589954, 655751, 590080, 656005, 589918, 590173, 590044, 655937, 589978, 655807, 590104, 656061, 589894, 590149, 590020, 655897, 589954, 655767, 590080, 656021, 589918, 590173, 590044, 655953, 589978, 655823, 590104, 656077, 589870, 590125, 589996, 655865, 589930, 655735, 590056, 655989, 589894, 590149, 590020, 655921, 589954, 655791, 590080, 656045, 589870, 590125, 589996, 655881, 589930, 655751, 590056, 656005, 589894, 590149, 590020, 655937, 589954, 655807, 590080, 656061, 65536, 65537, 65538, 65539, 65540, 65541, 65542, 65543, 65544, 65545, 65546, 65547, 65548, 65549, 65550, 65551, 65552, 65553, 65554, 65555, 65556, 65557, 65558, 65559, 65560, 65561, 65562, 65563, 65564, 65565, 65566, 65567, 65568, 65569, 65570, 65571, 65572, 65573, 65574, 65575, 65576, 65577, 65578, 65579, 65580, 65581, 65582, 65583, 65584, 65585, 65586, 65587, 65588, 65589, 65590, 65591, 65592, 65593, 65594, 65595, 65596, 65597, 65598, 65599, 65600, 65601, 65602, 65603, 65604, 65605, 65606, 65607, 65608, 65609, 65610, 65611, 65612, 65613, 65614, 65615, 65616, 65617, 65618, 65619, 65620, 65621, 65622, 65623, 65624, 65625, 65626, 65627, 65628, 65629, 65630, 65631, 65632, 65633, 65634, 65635, 65636, 65637, 65638, 65639, 65640, 65641, 65642, 65643, 65644, 65645, 65646, 65647, 65648, 65649, 65650, 65651, 65652, 65653, 65654, 65655, 65656, 65657, 65658, 65659, 65660, 65661, 65662, 65663, 65664, 65665, 65666, 65667, 65668, 65669, 65670, 65671, 65672, 65673, 65674, 65675, 65676, 65677, 65678, 65679, 65680, 65681, 65682, 65683, 65684, 65685, 65686, 65687, 65688, 65689, 65690, 65691, 65692, 65693, 65694, 65695, 65696, 65697, 65698, 65699, 65700, 65701, 65702, 65703, 65704, 65705, 65706, 65707, 65708, 65709, 65710, 65711, 65712, 65713, 65714, 65715, 65716, 65717, 65718, 65719, 65720, 65721, 65722, 65723, 65724, 65725, 65726, 65727, 65728, 65729, 65730, 65731, 65732, 65733, 65734, 65735, 65736, 65737, 65738, 65739, 65740, 65741, 65742, 65743, 65744, 65745, 65746, 65747, 65748, 65749, 65750, 65751, 65752, 65753, 65754, 65755, 65756, 65757, 65758, 65759, 65760, 65761, 65762, 65763, 65764, 65765, 65766, 65767, 65768, 65769, 65770, 65771, 65772, 65773, 65774, 65775, 65776, 65777, 65778, 65779, 65780, 65781, 65782, 65783, 65784, 65785, 65786, 65787, 65788, 65789, 65790, 65791, 65792, 65793, 65794, 65795, 65796, 65797, 65798, 65799, 65800, 65801, 65802, 65803, 65804, 65805, 65806, 65807, 65808, 65809, 65810, 65811, 65812, 65813, 65814, 65815, 65816, 65817, 65818, 65819, 65820, 65821, 65822, 65823, 65824, 65825, 65826, 65827, 65828, 65829, 65830, 65831, 65832, 65833, 65834, 65835, 65836, 65837, 65838, 65839, 65840, 65841, 65842, 65843, 65844, 65845, 65846, 65847, 65848, 65849, 65850, 65851, 65852, 65853, 65854, 65855, 131392, 131394, 131393, 131395, 131396, 131398, 131397, 131399, 131400, 131402, 131401, 131403, 131404, 131406, 131405, 131407, 131408, 131410, 131409, 131411, 131412, 131414, 131413, 131415, 131416, 131418, 131417, 131419, 131420, 131422, 131421, 131423, 131424, 131426, 131425, 131427, 131428, 131430, 131429, 131431, 131432, 131434, 131433, 131435, 131436, 131438, 131437, 131439, 131440, 131442, 131441, 131443, 131444, 131446, 131445, 131447, 131448, 131450, 131449, 131451, 131452, 131454, 131453, 131455, 131456, 131458, 131457, 131459, 131460, 131462, 131461, 131463, 131464, 131466, 131465, 131467, 131468, 131470, 131469, 131471, 131472, 131474, 131473, 131475, 131476, 131478, 131477, 131479, 131480, 131482, 131481, 131483, 131484, 131486, 131485, 131487, 131488, 131490, 131489, 131491, 131492, 131494, 131493, 131495, 131496, 131498, 131497, 131499, 131500, 131502, 131501, 131503, 131504, 131506, 131505, 131507, 131508, 131510, 131509, 131511, 131512, 131514, 131513, 131515, 131516, 131518, 131517, 131519, 131520, 131522, 131521, 131523, 131524, 131526, 131525, 131527, 131528, 131530, 131529, 131531, 131532, 131534, 131533, 131535, 131536, 131538, 131537, 131539, 131540, 131542, 131541, 131543, 131544, 131546, 131545, 131547, 131548, 131550, 131549, 131551, 131552, 131554, 131553, 131555, 131556, 131558, 131557, 131559, 131560, 131562, 131561, 131563, 131564, 131566, 131565, 131567, 131568, 131570, 131569, 131571, 131572, 131574, 131573, 131575, 131576, 131578, 131577, 131579, 131580, 131582, 131581, 131583, 131584, 131586, 131585, 131587, 131588, 131590, 131589, 131591, 131592, 131594, 131593, 131595, 131596, 131598, 131597, 131599, 131600, 131602, 131601, 131603, 131604, 131606, 131605, 131607, 131608, 131610, 131609, 131611, 131612, 131614, 131613, 131615, 131616, 131618, 131617, 131619, 131620, 131622, 131621, 131623, 131624, 131626, 131625, 131627, 131628, 131630, 131629, 131631, 131632, 131634, 131633, 131635, 131636, 131638, 131637, 131639, 131640, 131642, 131641, 131643, 131644, 131646, 131645, 131647, 131648, 131650, 131649, 131651, 131652, 131654, 131653, 131655, 131656, 131658, 131657, 131659, 131660, 131662, 131661, 131663, 131664, 131666, 131665, 131667, 131668, 131670, 131669, 131671, 131672, 131674, 131673, 131675, 131676, 131678, 131677, 131679, 131680, 131682, 131681, 131683, 131684, 131686, 131685, 131687, 131688, 131690, 131689, 131691, 131692, 131694, 131693, 131695, 131696, 131698, 131697, 131699, 131700, 131702, 131701, 131703, 131704, 131706, 131705, 131707, 131708, 131710, 131709, 131711, 131712, 131714, 131713, 131715, 131716, 131718, 131717, 131719, 131720, 131722, 131721, 131723, 131724, 131726, 131725, 131727, 131728, 131730, 131729, 131731, 131732, 131734, 131733, 131735, 131736, 131738, 131737, 131739, 131740, 131742, 131741, 131743, 131744, 131746, 131745, 131747, 131748, 131750, 131749, 131751, 131752, 131754, 131753, 131755, 131756, 131758, 131757, 131759, 131760, 131762, 131761, 131763, 131764, 131766, 131765, 131767, 131768, 131770, 131769, 131771, 131772, 131774, 131773, 131775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    sum =
                        -- Array.foldl (+) 0
                        Array.slice 0 10
                in
                -- Internal.buildHuffmanTable tableGroup 0 8 codeLengths |> Expect.equal { tableGroup = newTableGroup, total_size = 256 }
                Internal.buildHuffmanTable tableGroup 0 8 codeLengths
                    |> .tableGroup
                    |> sum
                    |> Expect.equal (sum newTableGroup)
        , test "count" <|
            \_ ->
                let
                    input =
                        Array.repeat 64 6

                    expected =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                in
                Internal.generateCount input 64
                    |> Expect.equal expected
        , test "count 2" <|
            \_ ->
                let
                    codeLengths =
                        Array.append (Array.repeat 320 9) (Array.repeat 384 10)

                    expected =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ]
                in
                Internal.generateCount codeLengths 704
                    |> Expect.equal expected
        , test "initialOffsets" <|
            \_ ->
                let
                    count =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    expected =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 64, 64, 64, 64, 64, 64, 64, 64, 64 ]
                in
                Internal.generateOffsets count
                    |> Expect.equal expected
        , test "initialOffsets 2" <|
            \_ ->
                let
                    count =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ]

                    expected =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 704, 704, 704, 704, 704 ]
                in
                Internal.generateOffsets count
                    |> Expect.equal expected
        , test "sortSymbols" <|
            \_ ->
                let
                    codeLengths =
                        Array.repeat 64 6

                    count =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    initialOffsets =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 64, 64, 64, 64, 64, 64, 64, 64, 64 ]

                    expectedSorted =
                        Array.fromList (List.range 0 63)

                    expectedOffsets =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 ]
                in
                Internal.sortSymbols { codeLengthsSize = 64, codeLengths = codeLengths, offset = initialOffsets }
                    |> Expect.equal { sorted = expectedSorted, offset = expectedOffsets }
        , test "sortSymbols 2" <|
            \_ ->
                let
                    codeLengths =
                        Array.append (Array.repeat 320 9) (Array.repeat 384 10)

                    count =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ]

                    initialOffsets =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 704, 704, 704, 704, 704 ]

                    expectedSorted =
                        Array.fromList (List.range 0 703)

                    expectedOffsets =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 704, 704, 704, 704, 704, 704 ]
                in
                Internal.sortSymbols { codeLengthsSize = 704, codeLengths = codeLengths, offset = initialOffsets }
                    |> Expect.equal { sorted = expectedSorted, offset = expectedOffsets }
        , test "phase1" <|
            \_ ->
                let
                    rootBits =
                        8

                    tableOffset =
                        1

                    tableSize =
                        256

                    tableGroup =
                        Array.append (Array.fromList [ 1 ]) (Array.repeat 436 0)

                    count =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ]

                    sorted =
                        Array.fromList (List.range 0 703)
                in
                Internal.phase1 rootBits tableOffset tableSize sorted count 1 0 0 2 tableGroup
                    |> Expect.equal ( ( Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ], 0 ), 0, tableGroup )
        , test "nextTableBitSize" <|
            \_ ->
                Internal.nextTableBitSize (Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 384, 0, 0, 0, 0, 0 ]) 9 8
                    |> Expect.equal 1
        , test "cmd_lookup" <|
            \_ ->
                Array.get 522 Internal.cmd_lookup
                    |> Expect.equal (Just 4)
        , test "offsets" <|
            \_ ->
                let
                    insert =
                        Array.fromList [ 0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26, 34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594 ]

                    copy =
                        Array.fromList [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 22, 30, 38, 54, 70, 102, 134, 198, 326, 582, 1094, 2118 ]
                in
                Internal.calculateOffsets
                    |> Expect.equal ( insert, copy )
        ]


bug1 =
    describe "bug 1"
        [ test "count" <|
            \_ ->
                let
                    data =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ]

                    expected =
                        Array.fromList [ 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                in
                Internal.generateCount data (Array.length data)
                    |> Expect.equal expected
        , test "offsets" <|
            \_ ->
                let
                    data =
                        Array.fromList [ 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    expected =
                        Array.fromList [ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ]
                in
                Internal.generateOffsets data
                    |> Expect.equal expected
        , test "sorted" <|
            \_ ->
                let
                    data =
                        { offset = Array.fromList [ 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ]
                        , codeLengthsSize = 18
                        , codeLengths = Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ]
                        }

                    sorted =
                        Array.fromList [ 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    offset =
                        Array.fromList [ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ]

                    expected =
                        { sorted = sorted, offset = offset }
                in
                Internal.sortSymbols data
                    |> Expect.equal expected
        , test "replicateValue" <|
            \_ ->
                let
                    data =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    expected =
                        Array.fromList [ 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 65544, 0, 0 ]
                in
                Internal.replicateValue data 0 2 32 65544
                    |> Expect.equal expected
        , test "calculateDistanceLut" <|
            \_ ->
                let
                    maxDistanceAlphabetLimit =
                        544

                    data =
                        { distExtraBits = Array.repeat maxDistanceAlphabetLimit 0
                        , distOffset = Array.repeat maxDistanceAlphabetLimit 0
                        , distancePostfixBits = 0
                        , numDirectDistanceCodes = 0
                        }

                    expected =
                        { distExtraBits = Array.append (Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 0 ]) (Array.repeat 479 0)
                        , distOffset = Array.append (Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 9, 13, 21, 29, 45, 61, 93, 125, 189, 253, 381, 509, 765, 1021, 1533, 2045, 3069, 4093, 6141, 8189, 12285, 16381, 24573, 32765, 49149, 65533, 98301, 131069, 196605, 262141, 393213, 524285, 786429, 1048573, 1572861, 2097149, 3145725, 4194301, 6291453, 8388605, 12582909, 16777213, 25165821, 33554429, 50331645 ]) (Array.repeat 480 0)
                        , distancePostfixBits = 0
                        , numDirectDistanceCodes = 0
                        }
                in
                Internal.calculateDistanceLut 64 data
                    |> Expect.equal expected
        , test "phase1" <|
            \_ ->
                let
                    data =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    output =
                        Array.fromList [ 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 0 ]

                    ( rootBits, tableOffset, tableSize ) =
                        ( 5, 0, 32 )

                    sorted =
                        Array.fromList [ 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    ( len, step ) =
                        ( 1, 2 )

                    ( key, symbol ) =
                        ( 0, 0 )

                    currentTableGroup =
                        data

                    currentCount =
                        Array.fromList [ 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    expected =
                        ( ( Array.fromList [ 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
                          , 1
                          )
                        , 2
                        , output
                        )
                in
                Internal.phase1 rootBits tableOffset tableSize sorted currentCount len key symbol step currentTableGroup
                    |> Expect.equal expected
        , test "actual" <|
            \_ ->
                let
                    arg1 =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

                    arg2 =
                        Array.fromList [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ]
                in
                Internal.buildHuffmanTable arg1 32 5 arg2
                    |> .tableGroup
                    |> Expect.equal (Array.fromList [ 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 65544, 65552, 0 ])
        ]


paragraph1Bytes =
    [ 0x1BBE0C00, 0x9C07B62D, 0x271B625C, 0xC7CA67D0, 0x786886D2, 0x6AB0AD56, 0xBF7BC53D, 0x0FDFDB81, 0x17206582, 0x28A4983A, 0x31442DDE, 0x157237BE, 0xA5D6D24B, 0x653BBF6D, 0x80C1B76A, 0xD98C4523, 0xE40B21BB, 0xA7774821, 0x7E8884B9, 0x83ACB08F, 0x02890421, 0x93425248, 0x4161660E, 0xE3777B1C, 0x93686588, 0xECCC1573, 0x9DB35227, 0x0C0DDF7F, 0xB498F794, 0x44BB87DC, 0xD8A18535, 0xBEB2C0A2, 0x8EF8C976, 0x42D653C7, 0x5710DDC7, 0xF042B766, 0x26E0536C, 0xA61D2571, 0x0B661301, 0xE1AB10C0, 0xEA4E5B73, 0x659FC84A, 0x0A193C65, 0xCF3E51FD, 0xE9D72121, 0x4C0735F1, 0x37E5BEF1, 0x5AE45740, 0xEBBC1AF1, 0x48FE4FED, 0x4564CAA1, 0xE1E8807E, 0xC61276DD, 0xF65E1916, 0x6B5EC880, 0x66CDBEC9, 0xCB91FBF2, 0x0BC507CC, 0x60E2926D, 0x5B601562, 0xC51C759A, 0x5BB62487, 0x76D056F9, 0xF3C20633, 0xE3204648, 0x8439AAD2, 0x23894B92, 0x1EAAB01D, 0x94CE9F19, 0x1FDF7033, 0x765A30B1, 0xBBA45F06, 0xBB4913DA, 0x5EB959FC, 0xBE070434, 0xB71167CF, 0x825BA0E6, 0x02FD3CCC, 0x8D6F065E, 0x5623282E, 0xCAD2A615, 0xE617587D, 0xD325686D, 0x5D8B9DCB, 0xBA202027, 0x4DEB2484, 0x5A97AC6B, 0xC2B168CA, 0x82359BF2, 0x715BFC4B, 0xF2BB1829, 0x90066945, 0x8480C1D7, 0x3BBF6532, 0x14643C77, 0x8F3CEA80, 0x755E6C7D, 0xB539623A, 0xBEA02C78, 0x11A1943C, 0x2A21036A, 0xF417F867, 0xFD0FDC26, 0xC3A037CB, 0x3199F83D, 0x18E489FB, 0x0C650599, 0x7EEBDB47, 0x8AA2BDEA, 0x3FD80665, 0xA74A610D, 0x8D4A6C50, 0xAA3B6A1C, 0x18E5F774, 0xA8751263, 0x082325F4, 0x13047068, 0x1DD6CB63, 0xA766B38C, 0xD17C9834, 0x60A48522, 0xD0549837, 0xB8580837, 0x60442914, 0x433B0362, 0xCAD35B69, 0xC3D122A2, 0xB959D8B6, 0x357B969D, 0x7431B94E, 0xFC322E3C, 0xE1CCBE2C, 0xB2B30CE5, 0x97E4F505, 0xB510C12C, 0xC52D032B, 0x90868783, 0x35918021, 0xA2499690, 0xBA9B9F9E, 0x04774ABB, 0xA38CFAF2, 0xFC295032, 0xFAE1394C, 0xD67E7387, 0x29FF89E8, 0x56D60AB7, 0xDD46C943, 0x14B07F58, 0x50711C2B, 0xF8376CF8, 0x190EA0F9, 0xDB78D3B8, 0xBC2B25DF, 0x490CFEA8, 0x081F03E6, 0x01D6EC1B, 0x9A252CB7, 0x675AA59C, 0xDD68956F, 0x89153B0D, 0x07A2DF16, 0x9FA3688A, 0x59BBB433, 0xEEE0295C, 0xA809B8D8, 0xD94176FA, 0xB32404C6, 0xB05AEA9E, 0x53FBB7FA, 0xC826A4EB, 0x5094C0DE, 0x0CC0679E, 0x95F311B9, 0x6D350B51, 0x74B286D5, 0x72642A25, 0xAFE05414, 0xF40BF939, 0x57D1584F, 0x693DDCB5, 0x991588BE, 0x958C24E6, 0xCFD73B95, 0x8DDEB7B3, 0x93DCEA75, 0x797D68C1, 0x56F4D4CC, 0x8056497E, 0x2EE7F0AD, 0xBBEA37E0, 0x4E1C64EA, 0x433E1553, 0xD708C2A1, 0x3623E7AD, 0xE7B59243, 0x81331092, 0xB8BDF5B7, 0xEE23C298, 0xCB16BB42, 0x1B75A056, 0x18493AC7, 0xD4F925E5, 0x84B1CFC3, 0x44E50408, 0x9A810895, 0x6B03BDC9, 0xFE840050, 0x88ADFC8E, 0x2A1CA4BC, 0xFCD8E461, 0xFD912D3E, 0xF7AE3DE7, 0x29C210CD, 0x46461F8C, 0x2567BD1E, 0xC9F7086B, 0x9CD33B1D, 0x2B940D32, 0xAEE84844, 0xABE04428, 0x433ADDB2, 0x82B1C68C, 0xA3E158B2, 0x8E09FA1F, 0xFF5AA225, 0xA0657452, 0x185C0EDA, 0x78CFD03E, 0xC0D96770, 0xD6AC79EB, 0xDF446CD4, 0xC0826C9D, 0x4964F0B5, 0xAA9111C8, 0xACA01EB8, 0x76CAD70A, 0x543BE902, 0x2338FB54, 0x5DB2A72D, 0xC0EBD153, 0xED3AE4BA, 0xCC9066C8, 0x77CE84AC, 0x238F5373, 0x594A31D2, 0x6166CDB5, 0x9563D8C1, 0x9FB267A6, 0xF4C5E838, 0xD0A156AC, 0xFCE95036, 0xBDC3EC58, 0xA199554F, 0x64D797AE, 0xE47D1DA2, 0x6CAC8948, 0x68F1DEC4, 0x5CC92F0A, 0xF34C0A67, 0x1094AF5F, 0x4729BEAC, 0xBDCBFA65, 0x1B4EC877, 0xDFDC06F0, 0xAE628D21, 0xF3811766, 0xBCBED7A9, 0xC826447C, 0xF9822596, 0x14F4A0A4, 0x71392D26, 0xE2103B0F, 0x56BCA835, 0x9DDEB6BE, 0xE6AA012B, 0xE6895E63, 0x4EFDCDB5, 0x6DCA9034, 0xFC849C2E, 0x6CC66901, 0x6BA794FF, 0x2D3DADF9, 0x8A7E0E83, 0x19866E0E, 0xF6C98AED, 0x17D99250, 0x6F195359, 0x3597E626, 0x5314EE2C, 0x50737B00, 0x830DBCB1, 0x9873AEFD, 0x67BFC843, 0x05F21CC0, 0x65B18A80, 0x169ED706, 0xB0B14E65, 0xFB5FCC12, 0xC3FE0E5E, 0x46879AA1, 0x418B5350, 0x225C6BD4, 0x26996502, 0xA0467B10, 0xB7C4819F, 0x1E17C9EE, 0x250364A8, 0x339117CF, 0x4C6AE400 ]


paragraph1Text =
    """GRINNELL FORMATION.
Because of their dominantly red color, the shaly argillites which comprise the bulk of this formation are the most conspicuous rocks in the park. They lie immediately on top of the Appekunny and although their thickness varies considerably it is greater than 3,000 feet in several localities. Interbedded with the red argillites are thin white layers of quartzite, a former sandstone which has been converted by pressure into an extraordinarily hard, dense rock. Mud cracks, ripple and current marks, raindrop impressions, and other 8 features made while the sediments were accumulating are common. The red color is due to abundant iron oxide occurring mainly as a cement between the sand and mud grains. All the rocks of Glacier Park contain some iron, or rather contain iron-bearing minerals. These minerals have various colors unless they have been oxidized, in which case the color is red or brown. Oxidation of the Grinnell formation probably took place while the mud was accumulating and during those periods when it was exposed to the atmosphere. At such times also the mud dried and cracked, the marks of which are so prominent on the surfaces of the layers today.

The Grinnell formation seems to be everywhere. In the Many Glacier region it comprises the bulk of Grinnell Point, Altyn Peak, and Mount Allen, and is no less striking in the bases of Mount Wilbur and the Garden Wall. Ptarmigan Tunnel is drilled through it, and the trails to Grinnell Glacier, Cracker and Iceberg Lakes cross it. Redrock Falls, on the trail to Swiftcurrent Pass, and Ptarmigan Falls on the Iceberg Lake trail drop over several of its highly colored layers.

From the Blackfeet Highway on top of Two Medicine Ridge one can see the dark red rocks of this formation capping the summits of Rising Wolf and Red Mountains. Even from the valley floor it is just as noticeable. Sinopah Mountain standing alone and impressive across the lake from Two Medicine Chalets carries the red banner of the Grinnell formation.

These red rocks constitute an important scenic feature for many miles along Going-to-the-Sun Highway. If one begins his trip on this highway at its east entrance he soon finds himself in the midst of a group of imposing red peaks—Goat and Going-to-the-Sun on the right, Red Eagle and Mahtotopa on the left. The road crosses the formation along a mile and a half stretch just west of Baring Creek bridge. Innumerable loose slabs of red rock along the side of the road contain excellent mud cracks and ripple marks. Near Avalanche creek on the west side of Logan Pass the highway crosses the Grinnell where it comes to the surface on the western limb of the big syncline.

The formation is well exposed in the vicinity of Sperry Chalet and Glacier. It forms all the mountains surrounding the basin in which the chalet is located, and the trail from chalet to glacier lies wholly on it. At the glacier intensely folded white quartzite layers and red argillites are very conspicuous.

The visitor can readily trace the Grinnell from place to place throughout the entire park area, and can thus easily visualize that it as well as all other formations at one time filled the intervening spaces between the mountains. (See color of cover pages.)
"""


lookup_table_expected = 
    Array.fromList [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,46,47,47,47,47,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,12,16,12,12,20,12,16,24,28,12,12,32,12,36,12,44,44,44,44,44,44,44,44,44,44,32,32,24,40,28,12,12,48,52,52,52,48,52,52,52,48,52,52,52,52,52,48,52,52,52,52,52,48,52,52,52,52,52,24,12,28,12,12,12,56,60,60,60,56,60,60,60,56,60,60,60,60,60,56,60,60,60,60,60,56,60,60,60,60,60,24,12,28,12,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,56,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7]
